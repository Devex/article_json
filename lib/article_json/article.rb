module ArticleJSON
  class Article
    attr_reader :article_elements, :additional_elements

    # @param [Array[ArticleJSON::Elements::Base]] elements
    def initialize(elements)
      @article_elements = elements
      @additional_elements = []
    end

    # All elements of this article with optional additional elements placed in
    # between
    # @return [Array[ArticleJSON::Elements::Base]]
    def elements
      @elements ||= begin
        if @additional_elements.any?
          @additional_element_placer_class
            .new(@article_elements, @additional_elements)
            .merge_elements
        else
          @article_elements
        end
      end
    end

    # Hash representation of the article
    # @return [Hash]
    def to_h
      {
        article_json_version: VERSION,
        content: elements.map(&:to_h),
      }
    end

    # JSON representation of the article
    # @return [String]
    def to_json
      to_h.to_json
    end

    # Exporter instance for HTML
    # @return [ArticleJSON::Export::HTML::Exporter]
    def html_exporter
      ArticleJSON::Export::HTML::Exporter.new(elements)
    end

    # HTML export of the article
    # @return [String]
    def to_html
      html_exporter.html
    end

    # Exporter instance for AMP
    # @return [ArticleJSON::Export::AMP::Exporter]
    def amp_exporter
      ArticleJSON::Export::AMP::Exporter.new(elements)
    end

    # AMP export of the article
    # @return [String]
    def to_amp
      amp_exporter.html
    end

    # Exporter instance for AppleNews
    # @return [ArticleJSON::Export::AppleNews::Exporter]
    def apple_news_exporter
      ArticleJSON::Export::AppleNews::Exporter.new(elements)
    end

    # AppleNews export of the article
    # @return [String]
    def to_apple_news
      apple_news_exporter.to_json
    end

    # Exporter instance for FacebookInstantArticle
    # @return [ArticleJSON::Export::FacebookInstantArticle::Exporter]
    def facebook_instant_article_exporter
      ArticleJSON::Export::FacebookInstantArticle::Exporter.new(elements)
    end

    # FacebookInstantArticle export of the article
    # @return [String]
    def to_facebook_instant_article
      facebook_instant_article_exporter.html
    end

    # Exporter instance for plain text
    # @return [ArticleJSON::Export::PlainText::Exporter]
    def plain_text_exporter
      ArticleJSON::Export::PlainText::Exporter.new(elements)
    end

    # Plain text export of the article
    # @return [String]
    def to_plain_text
      plain_text_exporter.text
    end

    # Distribute passed elements evenly throughout the article. All passed
    # elements need to have an exporter to be represented in the rendered
    # article. If the method is called multiple times, the order of additional
    # elements is maintained.
    # @param [Object] additional_elements
    # @param [Class<#merge_elements>] with - The passes class's `#initialize` method needs
    #                                        to accept two lists of elements. See
    #                                        `ArticleJSON::Utils::AdditionalElementPlacer`
    #                                        for reference.
    def place_additional_elements(
      additional_elements,
      with: ArticleJSON::Utils::AdditionalElementPlacer
    )
      # Reset the `#elements` method memoization
      @elements = nil
      @additional_elements.concat(additional_elements)
      @additional_element_placer_class = with
    end

    class << self
      # Build a new article from hash (like the one generated by #to_h)
      # @return [ArticleJSON::Article]
      def from_hash(hash)
        hash = { content: hash } if hash.is_a?(Array)
        new(ArticleJSON::Elements::Base.parse_hash_list(hash[:content]))
      end

      # Build a new article from JSON (like the one generated by #to_json)
      # @return [ArticleJSON::Article]
      def from_json(json)
        from_hash(JSON.parse(json, symbolize_names: true))
      end

      # Build a new article from a Google Doc HTML export
      # @return [ArticleJSON::Article]
      def from_google_doc_html(html)
        parser = ArticleJSON::Import::GoogleDoc::HTML::Parser.new(html)
        new(parser.parsed_content)
      end
    end
  end
end
